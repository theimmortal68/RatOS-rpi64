name: Build RPi Image

on:
  workflow_dispatch:

jobs:
  build-raspios-base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare output directory with permissions
        run: mkdir -p output && chmod 777 output
        
      - name: Build Image
        working-directory: raspios64-base
        run: |
          mkdir -p ../output
          docker compose build
          docker compose run --rm \
            -v "${PWD}/../output:/mnt/output" \
            rpi_imagegen bash -c "
              echo 'Starting build...'
              ./rpi-image-gen/build.sh -o ~/base/base.options -D ~/base -c base
              cd /home/imagegen/rpi-image-gen/work/raspios64-base/deploy
              xz -T3 -z9e raspios64-base.img
              cp raspios64-base.img.xz /mnt/output/
              echo 'Build Finished'
            "
            
      - name: Upload compressed image
        uses: actions/upload-artifact@v4
        with:
          name: raspios64-base-img
          path: output/raspios64-base.img.xz

  build-mainsailos-base:
    runs-on: ubuntu-latest
    needs: build-raspios-base
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        
      - name: "üìÅ Create directories"
        run: |
          mkdir -p build

      - name: Download compressed image
        uses: actions/download-artifact@v4
        with:
          name: raspios64-base-img
          path: build

      - name: Verify downloaded file
        run: |
          echo "Downloaded files:"
          ls -lh build

      - name: "üõ† Unpack and rename image"
        run: |
          IMG_FILE=$(ls build/*.img.xz | head -n 1)
          echo "Found compressed Image file: ${IMG_FILE}"
          xz -d "${IMG_FILE}"
          DECOMPRESSED_FILE="${IMG_FILE%.xz}"
          mv "${DECOMPRESSED_FILE}" build/input.img
          echo "Image ready: build/input.img"

      - name: "üèó Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@v1.4.1
        with:
          workspace: "${{ github.workspace }}/build"
          scripts:  "${{ github.workspace }}/scripts"
          config: "${{ github.workspace }}/config.local"
          args: "--dns 8.8.8.8"

      - name: "‚úè Rename image"
        working-directory: ./build
        run: |
          ls -lha
