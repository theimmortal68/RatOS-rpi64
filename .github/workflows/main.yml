name: Build RPi64 image (mmdebstrap from YAML)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore apt cache
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt
            /var/lib/apt/lists
          key: apt-${{ runner.os }}-${{ hashFiles('rpi64.yaml') }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: Install system deps
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            mmdebstrap qemu-user-static binfmt-support \
            kpartx dosfstools e2fsprogs fdisk util-linux \
            xz-utils rsync curl ca-certificates jq \
            apt-cacher-ng \
            yq

          # Enable ARM binfmt (usually already enabled)
          sudo modprobe binfmt_misc || true
          sudo mount -t binfmt_misc none /proc/sys/fs/binfmt_misc || true
          sudo update-binfmts --enable qemu-aarch64 || true

          # Start apt-cacher-ng (for speed)
          sudo systemctl enable --now apt-cacher-ng || true
          curl -fsS http://127.0.0.1:3142/acng-report.html >/dev/null || true

      - name: Build image using rpi64.yaml
        env:
          # Make apt inside chroot use the local cacher
          APT_HTTP_PROXY: http://127.0.0.1:3142
        run: |
          set -euxo pipefail

          YAML=rpi64.yaml

          # Pull values (with sane defaults)
          SUITE="$(yq -r '.mmdebstrap.suite // "bookworm"' "$YAML")"
          MIRROR="$(yq -r '.mmdebstrap.mirror // "http://deb.debian.org/debian"' "$YAML")"
          VARIANT="$(yq -r '.mmdebstrap.variant // "apt"' "$YAML")"

          # Packages array -> space list
          PKGS="$(yq -r '.mmdebstrap.packages // [] | join(" ")' "$YAML")"

          # Hooks (each becomes one --setup-hook / --customize-hook)
          # Setup hooks (run before package install)
          mapfile -t SETUP_HOOKS < <(yq -r '.mmdebstrap["setup-hooks"] // [] | .[]' "$YAML")
          # Customize hooks (run after debootstrap)
          mapfile -t CUSTOM_HOOKS < <(yq -r '.mmdebstrap["customize-hooks"] // [] | .[]' "$YAML")

          # Construct mmdebstrap command args
          ARGS=( "--variant=$VARIANT" )

          # Add setup-hooks
          for h in "${SETUP_HOOKS[@]}"; do
            # mmdebstrap wants the shell line directly
            ARGS+=( "--setup-hook=$h" )
          done

          # Add customize-hooks
          for h in "${CUSTOM_HOOKS[@]}"; do
            ARGS+=( "--customize-hook=$h" )
          done

          # Output image name
          OUT="rpi64-$(date +%Y%m%d-%H%M%S).img"

          # Run mmdebstrap:
          # - This assumes your YAML hooks handle image partitioning/loop mounting OR
          #   youâ€™re building a rootfs tar. If your hooks already dd/format/mount and
          #   produce $OUT themselves, set TARGET=/dev/null to avoid an extra tarball.
          #
          # Example: produce a rootfs tarball first, then convert to image inside hooks,
          # or use --customize-hook steps that do the image creation. If your YAML
          # already does everything, we can set TARGET=/dev/null and let hooks write OUT.
          #
          TARGET="rootfs.tar"
          mmdebstrap \
            --aptopt='Acquire::http::Proxy "'"$APT_HTTP_PROXY"'"' \
            "${ARGS[@]}" \
            "$SUITE" "$TARGET" "$MIRROR"

          # If your hooks already wrote an .img, prefer that:
          if ls -1 *.img >/dev/null 2>&1; then
            echo "Using image produced by hooks."
          else
            echo "No .img produced by hooks; you likely need a hook that creates and populates partitions."
            echo "We built a rootfs tarball: $TARGET"
            # Stop with error to avoid uploading nothing:
            exit 1
          fi

      - name: Compress image
        if: always()
        run: |
          set -euxo pipefail
          IMG="$(ls -1t *.img | head -n1)"
          [ -n "$IMG" ]
          xz -T0 -9ev "$IMG"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpi64-image
          path: |
            *.img.xz
          if-no-files-found: error

      - name: apt-cacher-ng stats (optional)
        if: always()
        run: |
          set -euxo pipefail
          curl -fsS http://127.0.0.1:3142/acng-report.html | head -n 200 || true          sudo mount -t binfmt_misc none /proc/sys/fs/binfmt_misc || true
          sudo update-binfmts --enable qemu-aarch64 || true

          # Install the bdebstrap Python CLI (if you use it to drive mmdebstrap)
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user bdebstrap

      - name: Start apt-cacher-ng (accelerate apt inside chroot)
        run: |
          set -euxo pipefail
          sudo apt-get install -y apt-cacher-ng
          sudo systemctl enable --now apt-cacher-ng
          curl -fsS http://127.0.0.1:3142/acng-report.html >/dev/null || true

      - name: Build image with bdebstrap
        env:
          # chroot apt will honor this automatically
          APT_HTTP_PROXY: http://127.0.0.1:3142
          BDEBSTRAP_LOG_LEVEL: DEBUG
        run: |
          set -euxo pipefail
          # Prefer the Python CLI we just installed
          ~/.local/bin/bdebstrap build --debug --config rpi64.yaml

      - name: List produced images
        run: |
          ls -lah
          echo "Candidate images:"
          ls -1 *.img || true

      - name: Compress newest image
        if: always()
        run: |
          set -euxo pipefail
          IMG="$(ls -1t *.img | head -n1)"
          [ -n "$IMG" ]
          xz -T0 -9ev "$IMG"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpi64-image
          path: |
            *.img.xz
          if-no-files-found: error

      - name: apt-cacher-ng stats (optional)
        if: always()
        run: |
          set -euxo pipefail
          curl -fsS http://127.0.0.1:3142/acng-report.html | head -n 200 || true
