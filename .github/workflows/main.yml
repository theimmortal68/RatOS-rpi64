name: Build RPi Image

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main

jobs:
  build-raspios-base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use official QEMU setup action for better caching and cross-platform support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # Optionally set up Buildx for enhanced docker usage and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare output directory with permissions
        run: mkdir -p output && chmod 777 output
        
      - name: Build Image
        working-directory: raspios64-base
        run: |
          mkdir -p ../output
          docker compose build
          docker compose run --rm \
            -v "${PWD}/../output:/mnt/output" \
            rpi_imagegen bash -c "
              echo 'Starting build...'
              ./rpi-image-gen/build.sh -o ~/base/base.options -D ~/base -c base
              cd /home/imagegen/rpi-image-gen/work/raspios64-base/deploy
              xz -T3 -z9e raspios64-base.img
              cp raspios64-base.img.xz /mnt/output/
              echo 'Build Finished'
            "
            
      - name: Upload compressed image
        uses: actions/upload-artifact@v4
        with:
          name: raspios64-base-img
          path: |
            output/raspios64-base.img.xz
            
  build-mainsailos-base:
    runs-on: ubuntu-latest
    steps:
      - name: "📁 Create directories"
        run: |
          mkdir -p build

      - name: Download compressed image
        working-directory: ./build
        uses: actions/download-artifact@v4
        with:
          name: raspios64-base-img

      - name: Extract artifact
        working-directory: ./build
        run: |
          unzip artifact.zip
          echo "Extracted files:"
          ls -l
          sha256sum raspios64-base.img > raspios64-base.img.sha256

      - name: "🛠 Unpack and rename image"
        working-directory: ./build
        run: |
          # search for the image file in the build directory
          IMG_FILE=$(ls *.img.xz | head -n 1)
          echo "Found compressed Image file: ${IMG_FILE}"

          # extract the image file
          xz -d "${IMG_FILE}"

          DECOMPRESSED_FILE="${IMG_FILE%.xz}"
          echo "Image file: ${DECOMPRESSED_FILE}"

          # rename the image file
          mv "${DECOMPRESSED_FILE}" input.img

      - name: "🔎 Show scripts"
        working-directory: ./scripts
        run: ls -la

  
